#!/usr/bin/env bash
set -o pipefail
set -o nounset
set -o errexit
# set -o xtrace

PROGNAME="$(basename "$0")"
PROGDIR="$(dirname "$0")"

main () {
    . "${PROGDIR}/../share/fe/fe.sh"
    . "${PROGDIR}/../share/fe/shell-echo.sh"

    local -a THIS_COMMAND=("${0}" "${@}")

    local verbose=0
    local dry_run=0
    local exclude_binaries=0
    local exclude_quasi_binaries=0
    local include_all_directories=0
    local include_all_files=0
    local all=0
    local as_shell=0
    local as_flat=0

    local -a initial_global_options=() # ones that must be specified first
    local -a global_options=()
    local -a starting_points=()
    local -a directory_excludes=()
    local -a file_excludes=()

    local -a find_directory_excludes=()
    local -a find_file_excludes=()
    local -a find_path_excludes=()

    local -a user_file_excludes=()
    local -a user_directory_excludes=()
    local -a user_path_excludes=()

    local -a find_file_includes=()

    local -a fefind_config_options=()
    local -a fegrep_config_options=()

    local -a allow_files=()
    local -a allow_dirs=()

    fe-config
    set -- ${fefind_config_options+"${fefind_config_options[@]}"} "$@"

    local ARGSHIFT=0
    get-find-arguments "$@"
    shift $((ARGSHIFT))

    local find='find'
    if [[ "$OSTYPE" = "darwin"* ]] && command -v gfind >/dev/null 2>/dev/null ; then
        find='gfind'
    fi

    if (( all >= 1 )) ; then
        include_all_directories=1
        include_all_files=1
    fi
    if (( all >= 2 )) ; then
        exclude_binaries=0
        exclude_quasi_binaries=0
    fi

    if (( ! include_all_directories )) ; then
        add-directory-excludes
    fi
    if (( ! include_all_files )) ; then
        add-file-excludes
    fi
    if (( exclude_binaries )) ; then
        add-binary-file-excludes
    fi
    if (( exclude_quasi_binaries )) ; then
        add-quasi-binary-file-excludes
    fi

    local allowfile
    local allowdir

    for allowfile in ${allow_files+"${allow_files[@]}"} ; do
        array-exclude file_excludes "$allowfile"
    done
    for allowdir in ${allow_dirs+"${allow_dirs[@]}"} ; do
        array-exclude directory_excludes "$allowdir"
    done

    convert-file-excludes
    convert-directory-excludes
    convert-path-excludes

    if (( verbose )) ; then
        >&2 echo "initial global options:                         ${initial_global_options[@]@Q}"
        >&2 echo "starting points:                                ${starting_points[@]@Q}"
        >&2 echo "global options:                                 ${global_options[@]@Q}"
        >&2 echo "remaining arguments:                            ${@@Q}"
        >&2 echo "number of directory excludes:                   ${#directory_excludes[@]}"
        >&2 echo "number of file excludes:                        ${#file_excludes[@]}"
        >&2 echo "number of path excludes:                        ${#find_path_excludes[@]}"
        >&2 echo "number of directory exclude arguments for find: ${#find_directory_excludes[@]}"
        >&2 echo "number of file exclude arguments for find:      ${#find_file_excludes[@]}"
        >&2 echo "number of path exclude arguments for find:      ${#find_path_excludes[@]}"
        >&2 echo "allow ${allow_files[@]}"
        >&2 echo "allow_dirs ${allow_dirs[@]}"
    fi

    local -a find_command=()
    find_command+=("${find}")
    find_command+=(${initial_global_options+"${initial_global_options[@]}"})
    find_command+=(${starting_points+"${starting_points[@]}"})
    find_command+=(${global_options+"${global_options[@]}"})
    find_command+=(${find_path_excludes+"${find_path_excludes[@]}"})
    find_command+=(${find_directory_excludes+"${find_directory_excludes[@]}"})
    find_command+=(${find_file_excludes+"${find_file_excludes[@]}"})
    find_command+=(${find_file_includes+"${find_file_includes[@]}"})
    find_command+=("$@")

    if (( as_shell )) ; then
        shell-echo "${find_command[@]}"
        exit
    fi
    if (( dry_run || verbose )) ; then
        >&2 shell-echo "+ ${find_command[@]}"
    fi
    if (( dry_run )) ; then
        exit
    fi

    # do the thing
    exec ${find_command+"${find_command[@]}"}
}

add-directory-excludes () {
    directory_excludes+=(
        'vendor'
        'node_modules'
        '.cache'
        '.cpan'

        # version control
        '.git'
        '.svn'

        # others from emacs grep.el
        'SCCS'
        'RCS'
        'CVS'
        'MCVS'
        '.src'
        '.hg'
        '.bzr'
        '_MTN'
        '_darcs'
        '{arch}'
        '.sass-cache'

        # BigCommerce
        'parsed/templates'
        'parsed/scss'

        # emacs
        'elpa'

        # etc.
        'zip-cache'
    )
}

add-file-excludes () {
    file_excludes+=(
        # backups
        '*~'
        '#*#'
        '.*~'
        '.#*'
        '*.bak'
        '*.tmp'
        '*.old'
        '*.orig'
        '*.bak.*'
        '*.tmp.*'
        '*.old.*'
        '*.orig.*'

        # archives
        '*.zip'
        '*.jar'
        '*.sym'

        # compressed files
        '*.gz'

        # minified/map files
        '*.min'
        '*.min.*'
        '*.css.map'
        '*.js.map'
        '*.min.map'
        'composer.lock'
        '*.bundle.js'
        '*.chunk.js'

        # BigCommerce minified
        'theme-bundle.main.js'
        'theme.scss.json'
        'assets/dist/report.html'
        'parsed/lang.json'
        'theme-bundle.chunk.*.js'
        'theme-bundle.head_async.js'

        # projectile
        'projectile.cache'

        # emacs
        'ido.last'
    )
}

add-binary-file-excludes () {
    file_excludes+=(
        # images
        '*.gif'
        '*.jpg'
        '*.jpeg'
        '*.png'
        '*.webp'

        # fonts
        '*.ttf'
        '*.otf'
        '*.ttc'
        '*.woff'
        '*.eot'

        # executables and libraries
        '*.exe'
        '*.a'
        '*.o'
        '*.so'
        '*.dll'
        '*.dylib'

        # Legacy Microsoft Office
        '*.doc'
        '*.ppt'
        '*.xls'

        # Media
        '*.mov'
        '*.m4a'
        '*.qt'
        '*.wma'
        '*.mp3'
        '*.m4r'
        '*.flv'
        '*.wmv'
        '*.swf'

        # Dalvik
        '*.dex'

        # Java
        '*.class'

        # Misc.
        '*.bin'
        '*.lbin'
        '*.flat'

        # Others from emacs grep.el.  I'm assuming these are binary
        # formats.
        '*.ln'
        '*.blg'
        '*.bbl'
        '*.elc'
        '*.lof'
        '*.glo'
        '*.idx'
        '*.lot'
        '*.fmt'
        '*.tfm'
        '*.fas'
        '*.lib'
        '*.mem'
        '*.x86f'
        '*.sparcf'
        '*.dfsl'
        '*.pfsl'
        '*.d64fsl'
        '*.p64fsl'
        '*.lx64fsl'
        '*.lx32fsl'
        '*.dx64fsl'
        '*.dx32fsl'
        '*.fx64fsl'
        '*.fx32fsl'
        '*.sx64fsl'
        '*.sx32fsl'
        '*.wx64fsl'
        '*.wx32fsl'
        '*.fasl'
        '*.ufsl'
        '*.fsl'
        '*.dxl'
        '*.lo'
        '*.la'
        '*.gmo'
        '*.mo'
        '*.toc'
        '*.aux'
        '*.cp'
        '*.fn'
        '*.ky'
        '*.pg'
        '*.tp'
        '*.vr'
        '*.cps'
        '*.fns'
        '*.kys'
        '*.pgs'
        '*.tps'
        '*.vrs'
        '*.pyc'
        '*.pyo'
        '*.ri'

        # anroid lol
        '*.apk'
        '*.aab'
        '*.dex'
        '*.ap_'
    )
}

add-quasi-binary-file-excludes () {
    file_excludes+=(
        '*.doc'
        '*.docx'
        '*.xls'
        '*.xlsx'
        '*.ppt'
        '*.pptx'
        '*.pdf'
        '*.ps'
        '*.sfd'                 # FontForge fonts
    )
}

convert-file-excludes () {
    find_file_excludes=()
    local exclude
    for exclude in ${file_excludes+"${file_excludes[@]}"} ${user_file_excludes+"${user_file_excludes[@]}"} ; do
        if (( as_flat )) ; then
            case "${exclude}" in
                */*)
                    find_file_excludes+=(\! -ipath "*/${exclude}")
                    ;;
                *)
                    find_file_excludes+=(\! -iname "${exclude}")
                    ;;
            esac
        else
            if (( ${#find_file_excludes[@]} )) ; then
                find_file_excludes+=("-o")
            fi
            case "${exclude}" in
                */*)
                    find_file_excludes+=("-ipath" "*/${exclude}")
                    ;;
                *)
                    find_file_excludes+=("-iname" "${exclude}")
                    ;;
            esac
        fi
    done
    if (( ! as_flat )) ; then
        if (( ${#find_file_excludes[@]} )) ; then
            find_file_excludes=(
                \! \( ${find_file_excludes+"${find_file_excludes[@]}"} \)
            )
        fi
    fi
}

convert-directory-excludes () {
    find_directory_excludes=()
    local exclude
    for exclude in ${directory_excludes+"${directory_excludes[@]}"} ${user_directory_excludes+"${user_directory_excludes[@]}"} ; do
        if (( as_flat )) ; then
            case "${exclude}" in
                /*)
                    find_directory_excludes+=(
                        \! \( -type d -ipath "${exclude}" -prune \)
                    )
                    ;;
                */*)
                    find_directory_excludes+=(
                        \! \( -type d -ipath "*/${exclude}" -prune \)
                    )
                    ;;
                *)
                    find_directory_excludes+=(
                        \! \( -type d -iname "${exclude}" -prune \)
                    )
                    ;;
            esac
        else
            if (( ${#find_directory_excludes[@]} )) ; then
                find_directory_excludes+=("-o")
            fi
            case "${exclude}" in
                /*)
                    find_directory_excludes+=("-ipath" "${exclude}")
                    ;;
                */*)
                    find_directory_excludes+=("-ipath" "*/${exclude}")
                    ;;
                *)
                    find_directory_excludes+=("-iname" "${exclude}")
                    ;;
            esac
        fi
    done
    if (( ! as_flat )) ; then
        if (( ${#find_directory_excludes[@]} )) ; then
            find_directory_excludes=(
                \! \( -type d \( ${find_directory_excludes+"${find_directory_excludes[@]}"} \) -prune \)
            )
        fi
    fi
}

convert-path-excludes () {
    find_path_excludes=()
    local exclude
    for exclude in ${user_path_excludes+"${user_path_excludes[@]}"} ; do
        case "${exclude}" in
            *'/*')
                find_path_excludes+=(\! -ipath "${exclude}")
                ;;
            *)
                find_path_excludes+=(\! -ipath "${exclude}")
                find_path_excludes+=(\! -ipath "${exclude}/*")
                ;;
        esac
    done
}

get-find-arguments () {
    local numargsin="$#"
    while (( $# )) ; do
        case "$1" in
            '-.'?*)
                if (( ${#find_file_includes[@]} )) ; then
                    find_file_includes+=(-o)
                fi
                find_file_includes+=(-name "*${1#-}")
		shift
                ;;
            '--all'|'-A')
                all=$((all + 1))
                ;;
            '--verbose'|'-v')
                shift
                verbose=$((verbose + 1))
                ;;
            '--dry-run'|'-n')
                shift
                dry_run=1
                ;;
            '--shell'|'--as-shell')
                shift
                as_shell=1
                ;;
            '--flat'|'--flatten'|'--as-flat')
                shift
                as_flat=1
                ;;
            '--help'|'-h')
                usage
                exit 0
                ;;
            '--exclude-binaries'|'--exclude-binary'|'--exclude-binary-files')
                shift
                exclude_binaries=1
                ;;
            '--include-binaries'|'--include-binary'|'--include-binary-files')
                shift
                exclude_binaries=0
                ;;
            '--exclude-quasi-binaries'|'--exclude-quasi-binary'|'--exclude-quasi-binary-files')
                shift
                exclude_quasi_binaries=1
                ;;
            '--include-quasi-binaries'|'--include-quasi-binary'|'--include-quasi-binary-files')
                shift
                exclude_quasi_binaries=0
                ;;
            '--all-directories'|'--include-all-directories')
                shift
                include_all_directories=1
                ;;
            '--all-files'|'--include-all-files')
                shift
                include_all_files=1
                ;;

            '--allow')
                shift
                if (( ! $# )) ; then
                    >&2 echo "${PROGNAME}: --allow requires an argument"
                    exit 1
                fi
                allow_files+=("$1")
                shift
                ;;
            '--allow-dir')
                shift
                if (( ! $# )) ; then
                    >&2 echo "${PROGNAME}: --allow requires an argument"
                    exit 1
                fi
                allow_dirs+=("$1")
                shift
                ;;
            '--allow'=*)
                allow_files+=("${1#*=}")
                shift
                ;;
            '--allow-dir'=*)
                allow_dirs+=("${1#*=}")
                shift
                ;;

            '--exclude')
                shift
                if (( ! $# )) ; then
                    >&2 echo "${PROGNAME}: --exclude requires an argument"
                    exit 1
                fi
                user_file_excludes+=("$1")
                shift
                ;;
            '--exclude-dir')
                shift
                if (( ! $# )) ; then
                    >&2 echo "${PROGNAME}: --exclude-dir requires an argument"
                    exit 1
                fi
                user_directory_excludes+=("$1")
                shift
                ;;
            '--exclude-path')
                shift
                if (( ! $# )) ; then
                    >&2 echo "${PROGNAME}: --exclude-path requires an argument"
                    exit 1
                fi
                user_path_excludes+=("$1")
                shift
                ;;

            '--exclude='*)
                user_file_excludes+=("${1#*=}")
                shift
                ;;
            '--exclude-dir='*)
                user_directory_excludes+=("${1#*=}")
                shift
                ;;
            '--exclude-path='*)
                user_path_excludes+=("${1#*=}")
                shift
                ;;
            '-X='?*)
                user_file_excludes+=("${1#-X=}")
                user_directory_excludes+=("${1#-X=}")
                ;;
            '-X'?*)
                user_file_excludes+=("${1#-X}")
                user_directory_excludes+=("${1#-X}")
                ;;
            '-X')
                shift
                if (( ! $# )) ; then
                    >&2 echo "${PROGNAME}: -X requires an argument"
                    exit 1
                fi
                user_file_excludes+=("$1")
                user_directory_excludes+=("$1")
                ;;
            '-mindepth'|'--mindepth'|'--min-depth')
                shift
                if (( ! $# )) ; then
                    >&2 echo "${PROGNAME}: -mindepth requires an argument"
                    exit 1
                fi
                global_options+=(-mindepth "$1")
                shift
                ;;
            '-maxdepth'|'--maxdepth'|'--max-depth')
                shift
                if (( ! $# )) ; then
                    >&2 echo "${PROGNAME}: -maxdepth requires an argument"
                    exit 1
                fi
                global_options+=(-maxdepth "$1")
                shift
                ;;

            '--'*)
                >&2 echo "${PROGNAME}: ${1}: unknown option or option does not take an argument"
                exit 1
                ;;

            '-D'|'-O')
                option="$1"; shift
                if (( ! $# )) ; then
                    >&2 echo "${PROGNAME}: ${option} requires an argument"
                    exit 1
                fi
                optarg="$1"; shift
                case "$option" in
                    '-O')
                        initial_global_options+=("-O${optarg}")
                        ;;
                    '-D')
                        initial_global_options+=("-D" "${optarg}")
                        ;;
                esac
                ;;
            '-D'*|'-O'*)
                option="${1:0:2}"; optarg="${1:2}"; shift
                case "$option" in
                    '-O')
                        initial_global_options+=("-O${optarg}")
                        ;;
                    '-D')
                        initial_global_options+=("-D" "${optarg}")
                        ;;
                esac
                ;;
            '-H'|'-L'|'-P')
                initial_global_options+=("$1")
                shift
                ;;

            '!')
                break
                ;;
            '(')
                break
                ;;
            '-'*)
                # either a global option:
                #     -d
                #     -depth
                #     ...
                # or a test:
                #     -mtime
                #     -type
                # or an action:
                #     -exec
                #     -print
                # or an operator:
                #     -not
                break
                ;;

            *)
                starting_points+=("$1")
                shift
                ;;
        esac
    done

    if (( ${#find_file_includes[@]} )) ; then
        find_file_includes=(
            '(' "${find_file_includes[@]}" ')'
        )
    fi

    local numargsout="$#"
    ARGSHIFT=$(( numargsin - numargsout ))
}

usage () { cat <<EOF; }
usage:
    ${PROGNAME} [<option> ...] [<find-argument> ...]
options:
    --help                      display this message
    --verbose                   verbosity
    --dry-run                   dry run
    --exclude-binaries          exclude binary files from results
    --include-binaries          include binary files in results (default)
    --exclude-quasi-binaries    exclude pdf/ps/office/etc. docs
    --include-quasi-binaries    include pdf/ps/office/etc. docs (default)
    --all-directories           remove default directory exclusions
    --all-files                 remove default file exclusions
    --exclude=<glob>            specify additional files to exclude
    --exclude-dir=<glob>        specify additional directories to exclude
    --as-shell                  output shell command for copy/pasting
    --exclude-path=<glob>       specify appropriate \! -ipath args. to find
options passed to find:
    -O <level>              enable query optimization
    -D <options>            print diagnostic information
    -H                      only follow symb. links when processing arguments
    -L                      always follow symb. links
    -P                      never follow symb. links (default)
    -mindepth <num>
    -maxdepth <num>
EOF

###############################################################################

main "$@"
