#!/usr/bin/env bash
# -*- mode: sh; sh-shell: bash; comment-column: 72; fill-column: 128 -*-
set -o pipefail
set -o nounset
set -o errexit
# set -o xtrace

PROGNAME="$(basename "$0")"
PROGDIR="$(dirname "$0")"

main () {
    . "${PROGDIR}/../share/fe/fe.sh"
    . "${PROGDIR}/../share/fe/shell-echo.sh"

    local -a THIS_COMMAND=("${0}" "${@}")

    local verbose=0
    local dry_run=0
    local all=0
    local context_flag=0
    local as_shell=0
    local as_flat=0

    local files_without_match=0
    local files_with_matches=0
    local fecolumn=0

    local matcher=''                           # '', '-E', '-F', '-G', or '-P'
    local matcher_long=''                      # '', '--extended-regexp', autc.
    local matcher_required=''
    local matcher_required_long=''
    local matcher_conflict_source=''

    local -a grep_options=()
    local -a grep_patterns=()
    local -a fefind_options=()
    local -a fefind_ops=()                                              # -ls, -fls /dev/stderr, etc.
    local -a fefind_exclude_binaries=(--exclude-binaries)
    local -a fefind_exclude_quasi_binaries=()
    local -a fefind_all_directories=()
    local -a fefind_all_files=()

    local -a fefind_config_options=()
    local -a fegrep_config_options=()

    local -a fefind_command=(fefind)

    fe-config
    set -- ${fegrep_config_options+"${fefind_config_options[@]}"} "$@"

    get-options "$@"
    shift $((OPTIND - 1))

    # read pattern argument from cmdline
    if (( ! ${#grep_patterns[@]} )) ; then
        if (( $# )) ; then
            grep_patterns+=(-e "$1")
            shift
        else
            >&2 echo "${PROGNAME}: missing pattern argument"
            exit 1
        fi
    fi

    if (( ! $# )) ; then
        set -- .
    fi

    local grep='grep'
    if [[ "$OSTYPE" = "darwin"* ]] && command -v ggrep >/dev/null 2>/dev/null ; then
        grep='ggrep'
    fi

    if [[ "${TERM}" = "emacs-grep" ]] ; then
        # emacs M-x find-grep
        grep_options+=(--color -n -H)
    elif [[ "${TERM}" = "dumb" ]] && [[ -v INSIDE_EMACS ]] && [[ -n "${INSIDE_EMACS}" ]] ; then
        # emacs interactive shell
        grep_options+=(--color -n -H)
    fi

    fefind_command+=(${fefind_exclude_binaries+"${fefind_exclude_binaries[@]}"})
    fefind_command+=(${fefind_exclude_quasi_binaries+"${fefind_exclude_quasi_binaries[@]}"})
    fefind_command+=(${fefind_all_directories+"${fefind_all_directories[@]}"})
    fefind_command+=(${fefind_all_files+"${fefind_all_files[@]}"})
    fefind_command+=(${fefind_options+"${fefind_options[@]}"})
    fefind_command+=(${maxdepth:+--max-depth "${maxdepth}"})
    fefind_command+=("$@")
    fefind_command+=("-type" "f")
    fefind_command+=(${fefind_ops+"${fefind_ops[@]}"})
    fefind_command+=("-exec")
    fefind_command+=("${grep}")
    if [[ "${matcher}" != "" ]] ; then
        fefind_command+=("${matcher}")
    fi
    fefind_command+=(${grep_options+"${grep_options[@]}"})
    fefind_command+=(${grep_patterns+"${grep_patterns[@]}"})
    fefind_command+=({} +)

    if (( as_shell )) ; then
        shell-echo "${fefind_command[@]}"
        exit
    fi
    if (( dry_run || verbose )) ; then
        >&2 shell-echo "+ ${fefind_command[@]}"
    fi
    if (( dry_run )) ; then
        exec "${fefind_command[@]}"
    fi

    # do the thing
    exec "${fefind_command[@]}"
}

get-options () {
    local OPTION

    local options=''
    options="${options}"'EFGP'                            # matcher options
    options="${options}"'ivwxcLloqsbHhnTuZaIUz'           # taking no arguments
    options="${options}"'e:f:m:A:B:C:.:X:'                # taking arguments
    options="${options}"'rRD:d:'                          # taking no effect
    options="${options}"'-:'                              # this comes last

    while getopts "${options}" OPTION ; do
        check-long-option || break
        case "${OPTION}" in
            # fegrep(1) options --- long ones only
            'help')
                usage; exit 0;;
            'shell'|'as-shell')
                fefind_command+=("--as-shell")
                as_shell=1;;
            'flat'|'flatten'|'as-flat')
                fefind_command+=("--as-flat")
                as_flat=1;;
            'fls')
                require-argument "$@"; fefind_ops+=(-fls "${OPTARG}");;
            'ls')
                fefind_ops+=(-ls);;
            'verbose')
                fefind_command+=("--verbose")
                verbose=$((verbose + 1));;
            'dry-run')
                fefind_command+=("--dry-run")
                dry_run=1;;
            'non-ascii')
                add-non-ascii-pattern;;
            'non-ascii-printable')
                add-non-ascii-printable-pattern;;
            'css-class')
                require-argument "$@"; add-css-class-pattern "${OPTARG}";;
            'attribute'|'html-attribute'|'sgml-attribute'|'xml-attribute')
                require-argument "$@"; add-attribute-pattern "${OPTARG}";;
            'exclude-binaries'|'exclude-binary'|'exclude-binary-files')
                fefind_exclude_binaries=(--exclude-binary-files);;
            'include-binaries'|'include-binary'|'include-binary-files')
                fefind_exclude_binaries=();;
            'exclude-quasi-binaries'|'exclude-quasi-binary'|'exclude-quasi-binary-files')
                fefind_exclude_quasi_binaries=(--exclude-quasi-binary-files);;
            'include-quasi-binaries'|'include-quasi-binary'|'include-quasi-binary-files')
                fefind_exclude_quasi_binaries=();;
            'all-directories')
                fefind_all_directories=(--all-directories);;
            'all-files')
                fefind_all_files=(--all-files);;
            'allow')
                require-argument "$@"; fefind_options+=(--allow "${OPTARG}");;
            'allow-dir')
                require-argument "$@"; fefind_options+=(--allow-dir "${OPTARG}");;
            'mindepth'|'min-depth')
                require-argument "$@"; fefind_options+=(-mindepth "${OPTARG}");;
            'maxdepth'|'max-depth')
                require-argument "$@"; fefind_options+=(-maxdepth "${OPTARG}");;
            'all')
                fefind_options+=(--all);;

            # grep(1) options specifying a matcher
            'E'|'extended-regexp')          choose-matcher '-E' '--extended-regexp';;
            'F'|'fixed-strings')            choose-matcher '-F' '--fixed-strings';;
            'G'|'basic-regexp')             choose-matcher '-G' '--basic-regexp';;
            'P'|'perl-regexp')              choose-matcher '-P' '--perl-regexp';;

            # grep(1) options taking no arguments
            'i'|'ignore-case')              grep_options+=(-i);;
            'v'|'invert-match')             grep_options+=(-v);;
            'w'|'word-regexp')              grep_options+=(-w);;
            'x'|'line-regexp')              grep_options+=(-x);;
            'c'|'count')                    grep_options+=(-c);;
            'L'|'files-without-match')      files-without-match;;
            'l'|'files-with-matches')       files-with-matches;;
            'o'|'only-matching')            grep_options+=(-o);;
            'q'|'quiet'|'silent')           grep_options+=(-q);;
            's'|'no-messages')              grep_options+=(-s);;
            'b'|'byte-offset')              grep_options+=(-b);;
            'H'|'with-filename')            grep_options+=(-H);;
            'h'|'no-filename')              grep_options+=(-h);;
            'n'|'line-number')              grep_options+=(-n);;
            'T'|'initial-tab')              grep_options+=(-T);;
            'u'|'unix-byte-offsets')        grep_options+=(-u);;
            'Z'|'null')                     grep_options+=(-Z);;
            'a'|'text')                     grep_options+=(-a);;
            'I')                            grep_options+=(-I);;
            'U'|'binary')                   grep_options+=(-U);;
            'z'|'null-data')                grep_options+=(-z);;
            'line-buffered')                grep_options+=(--line-buffered);;

            # grep(1) options that take no effect
            'R'|'recursive')                : do nothing;;
            'r'|'dereference-recursive')    : do nothing;;
            'D'|'devices')                  : do nothing;;
            'd'|'directories')              : do nothing;;

            # grep(1) options requiring arguments
            'e'|'regexp')                   require-argument "$@"; grep_patterns+=(-e "${OPTARG}");;
            'f'|'file')                     require-argument "$@"; grep_patterns+=(-f "${OPTARG}");;
            'm'|'max-count')                require-argument "$@"; grep_options+=(-m "${OPTARG}");;
            'A'|'after-context')            require-argument "$@"; after-context "${OPTARG}";;
            'B'|'before-context')           require-argument "$@"; before-context "${OPTARG}";;
            'C'|'context')                  require-argument "$@"; context "${OPTARG}";;
            'label')                        require-argument "$@"; grep_options+=(--label="${OPTARG}");;
            'binary-files')                 require-argument "$@"; grep_options+=(--binary-files="${OPTARG}");;

            'grep-exclude')                 require-argument "$@"; grep_options+=(--exclude="${OPTARG}");;
            'grep-exclude-dir')             require-argument "$@"; grep_options+=(--exclude-dir="${OPTARG}");; # no use
            'grep-exclude-from')            require-argument "$@"; grep_options+=(--exclude-from="${OPTARG}");;
            'include'|'grep-include')       require-argument "$@"; grep_options+=(--include="${OPTARG}");;

            'X')                            require-argument "$@"; fefind_options+=(
                                                --exclude="${OPTARG}"
                                                --exclude-dir="${OPTARG}"
                                            );;

            'fefind-exclude')               require-argument "$@"; fefind_options+=(--exclude="${OPTARG}");;
            'fefind-exclude-dir')           require-argument "$@"; fefind_options+=(--exclude-dir="${OPTARG}");;

            'exclude-path')                 require-argument "$@"; fefind_options+=(--exclude-path="${OPTARG}");;

            'exclude')                      require-argument "$@"; fefind_options+=(--exclude="${OPTARG}");;
            'exclude-dir')                  require-argument "$@"; fefind_options+=(--exclude-dir="${OPTARG}");;

            '.')                            require-argument "$@"; grep_options+=(--include="*.${OPTARG}");;

            # long grep(1) options taking optional arguments
            'color')
                if [[ -v OPTARG ]] ; then
                    grep_options+=(--color="${OPTARG}")
                else
                    grep_options+=(--color)
                fi
                ;;

            '?')
                # short option invalid or missing argument
                >&2 echo "Type '${PROGNAME} --help' for more information."
                exit 1
                ;;
            *)
                # invalid long option
                >&2 echo "${PROGNAME}: unknown option -- ${OPTION}"
                >&2 echo "Type '${PROGNAME} --help' for more information."
                exit 1
                ;;
        esac
    done
}

after-context () {
    grep_options+=(-A "${1}")
}

before-context () {
    grep_options+=(-B "${1}")
}

context () {
    grep_options+=(-C "${1}")
}

choose-matcher () {
    matcher="$1"                                                        # e.g., '-E'
    matcher_long="$2"                                                   # e.g., '--extended-regexp'
    case "${matcher_required}" in
        '-P')
            case "${matcher}" in
                '-P')
                    matcher_required="${matcher}"
                    matcher_required_long="${matcher_long}"
                    ;;
                *)
                    >&2 echo "${PROGNAME}: ${matcher_long} conflicts with ${matcher_conflict_source}, which requires ${matcher_required_long}."
                    exit 1
                    ;;
            esac
            ;;
    esac
}

add-non-ascii-pattern () {
    require-perl-regexp-matcher '--non-ascii'
    grep_patterns+=(
        "-e"
        "[^[:ascii:]]"
    )
}

add-non-ascii-printable-pattern () {
    require-perl-regexp-matcher '--non-ascii-printable'
    grep_patterns+=(
        '-e'
        $'[^[:print:]\r\t]'     # can't specify \n here, triggers grep(1) error
    )
}

add-css-class-pattern () {
    require-perl-regexp-matcher '--css-class'
    local classname="$1"
    local rx="(?x: (?<=^|[[:space:]])
                   class
                   [[:space:]]*=[[:space:]]*
                   (?: \"(?:[^\"]*[[:space:]])?(?:${classname})(?:[[:space:]][^\"]*)?\"
                     | '(?:[^']*[[:space:]])?(?:${classname})(?:[[:space:]][^']*)?'
                     | (?:${classname})
                       (?= \$
                         | [[:space:]]
                         | >
                         | /
                       )
                   )
              )"
    rx="${rx//$'\n'/ }"
    grep_patterns+=(
        "-e"
        "${rx}"
    )
}

add-attribute-pattern () {
    require-perl-regexp-matcher '--attribute'
    local attrname="$1"
    if [[ "$attrname" = *"-" ]] ; then
        attrname="${attrname}[A-Za-z0-9-]*"
    fi
    local rx="(?x: (?<=^|[[:space:]])
                   (?:${attrname})
                   (?: [[:space:]]*=[[:space:]]*
                       (?: \"[^\"]*\"
                         | '[^']*'
                         | [^\"'[:space:]]+
                       )
                   )?
              )"
    rx="${rx//$'\n'/ }"
    grep_patterns+=(
        "-e"
        "${rx}"
    )
}

require-perl-regexp-matcher () {
    local option="$1"; shift                              # e.g., '--attribute'
    case "${matcher}" in
        '')
            matcher='-P'
            matcher_long='--perl-regexp'
            matcher_required='-P'
            matcher_required_long='--perl-regexp'
            matcher_conflict_source="${option}"
            ;;
        '-P')
            matcher_required='-P'
            matcher_required_long='--perl-regexp'
            matcher_conflict_source="${option}"
            ;;
        *)
            >&2 echo "${PROGNAME}: ${option} conflicts with ${matcher_long} because it requires --perl-regexp."
            exit 1
            ;;
    esac
}

files-without-match () {
    files_without_match=1
    grep_options+=(-L)
}

files-with-matches () {
    files_with_matches=1
    grep_options+=(-l)
}

###############################################################################

usage () { cat <<EOF; }
usage:
    ${PROGNAME} [<option> ...] [[--] [<grep-arguments> ...]]
options:
    -h, --help                      display this message
    -v, --verbose                   verbosity
    -n, --dry-run                   dry run
        --non-ascii
        --non-ascii-printable
        --css-class='<class>'
        --attribute='<attribute>'
        --attribute='<prefix>-'
        --exclude-binaries          include binary files in grep (default)
        --include-binaries          include binary files in grep
        --exclude-quasi-binaries    exclude pdf/ps/office/etc. docs
        --include-quasi-binaries    include pdf/ps/office/etc. docs (default)
        --as-shell                  output shell command for copy/pasting
        --exclude-path=<glob>       specify appropriate \! -ipath args. to find
        --ls                    list files to stdout
        --fls=<filename>        list files to <filename> (e.g., /dev/stderr)
matcher selection:
    -E, --extended-regexp       extended regular expressions
    -F, --fixed-strings         fixed strings instead of regular expressions
    -G, --basic-regexp          basic regular expressions
    -P, --perl-regexp           Perl-compatible regular expressions
matching control
    -e, --regexp=<pattern>      specify a <pattern> for matching
    -f, --file=<file>           obtain <pattern>S from <file>
    -i, --ignore-case           ignore case distinctions
    -v, --invert-match          select non-matching lines
    -w, --word-regexp           force <pattern>s to match only whole words
    -x, --line-regexp           force <pattern>s to match only whole lines
general output control
    -c, --count                 print only a count of matching lines per <file>
    -L, --files-without-match   print names of <file>s containing no matches
    -l, --files-with-matches    print names of <file>s containing matches
    -m, --max-count=<num>       stop after <num> matches
    -o, --only-matching         show only the parts of lines matching <pattern>
    -q, --quiet, --silent       suppress all normal output
    -s, --no-messages           suppress error messages
    --color, --colour[=<when>]  'always', 'never', or 'auto'
output line prefix control
    -b, --byte-offset           print the byte offset with output lines
    -H, --with-filename         print file name prefix
    -h, --no-filename           suppress file name prefix on output
        --label=<label>         specify standard input file name prefix
    -n, --line-number           print line number with output lines
    -T, --initial-tab           make tabs line up
    -u, --unix-byte-offsets     report offsets as if CRs were not there
    -Z, --null                  print '\0' bytes after filenames
context line control
    -A, --after-context=<num>   print <num> lines of trailing context
    -B, --before-context=<num>  print <num> lines of leading context
    -C, --context=<num>         print <num> lines of output context
file and directory selection
        --binary-files=<type>   'binary', 'text', or 'without-match'
    -a, --text                  --binary-files=text
    -I                          --binary-files=without-match
other grep options
        --line-buffered         flush output on every line
    -U, --binary                do not strip CR characters (DOS/Windows)
    -z, --null-data
options passed to grep
    --grep-exclude=<glob>        skip matching files
    --grep-exclude-from=<file>   skip files matching globs specified in file
    --grep-exclude-dir=<glob>    skip matching directories
    --include, --grep-include=<glob>
                                 search only matching files
options passed to fefind
    --exclude=<glob>, --fefind-exclude=<glob>
                                 skip matching files
    --exclude-dir=<glob>, --fefind-exclude-dir=<glob>
                                 skip matching directories (passed to fefind)
    --all-directories            ignore default directory exclusions
    --all-files                  ignore default file exclusions
    --exclude-binaries           exclude binary files from results (default)
    --include-binaries           include binary files in results
fe config file load order:
    ~/.fe/config.sh
    .fe-config.sh
    ../.fe-config.sh
    ../../.fe-config.sh
    etc.
config file contents:
    fefind-option
    fegrep-option
EOF

###############################################################################
# poor man's long options for bash

check-long-option () {
    if [[ "${OPTION}" = "-" ]] ; then
        if [[ "${OPTARG}" == "" ]] ; then
            # argument is '--' by itself; terminate option parsing
            return 1
        fi
        OPTION="${OPTARG}"
        unset OPTARG
        case "${OPTION}" in
            *=*)
                OPTARG="${OPTION#*=}"
                OPTION="${OPTION%%=*}"
                ;;
        esac
    fi
    return 0
}

require-argument () {
    if [[ "${OPTION}" = ? ]] ; then return ; fi
    if [[ ! -v OPTARG ]] ; then
        if (( OPTIND > $# )) ; then # long option missing argument
            >&2 echo "${PROGNAME}: option requires an argument -- ${OPTION}"
            >&2 echo "Type '${PROGNAME} --help' for more information."
            exit 1
        fi
        OPTARG="${@:OPTIND:1}"
        OPTIND=$((OPTIND + 1))
    fi
}

###############################################################################

main "$@"
